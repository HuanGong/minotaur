#define BOOST_AUTO_TEST_MAIN

#include <boost/test/unit_test.hpp>
#include <coroutine/coroutine.h>
#include <coroutine/coro_factory.h>
#include <coroutine/coro_bootstrap.h>
#include <common/logger.h>
#include "unittest_logger.h"

using namespace minotaur;
using namespace minotaur::unittest;

static minotaur::unittest::UnittestLogger logger_config;
LOGGER_STATIC_DECL_IMPL(logger, "root");

BOOST_AUTO_TEST_SUITE(TestCoroutine);
/*
BOOST_AUTO_TEST_CASE(testRun) {
  CoroutineFactory factory(2048);

  Coroutine* c1 = factory.CreateCoroutine();

  int i = 100000000;
  while (i--) {
    Coroutine* c2 = factory.CreateCoroutine();
    c1->Transfer(c2);
  } 
}

BOOST_AUTO_TEST_CASE(testBootstrap) {
  CoroutineFactory factory(2048);
  CoroBootstrap bootstrap;

  bootstrap.Start(factory.CreateCoroutine());
}
*/

BOOST_AUTO_TEST_CASE(testBootstrapWithTask) {
  CoroutineFactory factory(20480);

  CoroBootstrap bootstrap;
  
  int result = 0;

  bootstrap.Start(factory.CreateCoroutineTask([&](){
        int i = 100000000;
        int sum = 0;
        auto lambda = [&](){++sum;};
        while (i--) {
          Coroutine::Current()->Transfer(
             factory.CreateCoroutineTask(lambda));
        }
        result = sum;
      }));

  BOOST_CHECK_EQUAL(result, 100000000);
}

BOOST_AUTO_TEST_SUITE_END()

